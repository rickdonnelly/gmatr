% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_model_accuracy.R
\name{calc_model_accuracy}
\alias{calc_model_accuracy}
\title{Calculate model accuracy statistics from a tibble of observed and predicted values}
\usage{
calc_model_accuracy(dt, observed, predicted, gamma = 0, places = 2)
}
\arguments{
\item{observed}{A string identifying the column name of the observed values}

\item{predicted}{A string identifying the column name of the predicted values}

\item{gamma}{A floating point value specifying how close a predicted value must
be to observed value to be considered accurate. The value must be between 0
(exact match required) to 1.0 ("hitting the broad side of a barn"). The
default value is 0 (zero).}

\item{places}{An integer denoting the number of places past the decimal that
.  floating point statistics will be reported with. The default value is 2.}

\item{df}{Name of the tibble (data frame) object containing the observed and
predicted values}
}
\description{
Calculate model accuracy statistics from a tibble of observed and predicted values
}
\details{
This function returns a tibble with a variety of model accuracy 
  statistics based on fields containing observed and predicted values in the
  input tibble (data frame). The user specifies the field names containing 
  these two values. Most of the statistics are commonly used, so require no
  explanation. The last variable produced is _predictive accuracy_ (PA), a
  key performance measure used in ML models. The `gamma` parameter denotes
  how close the predicted value must be to the observed value to be
  considered a match. By default `gamma` is zero, meaning an exact match
  must be obtained for an observation to be considered accurate. A value of
  0.1 would allow any value +/- 10 percent of the observation to count as a
  match. A zero value for `gamma` is appropriate for categorical choice
  models, while non-zero values are typically used for numeric predictions.
}
\examples{
calc_model_accuracy(assignment_results, "count", "assigned", 0.2)
# You can group the data when passing it to this function:
calc_model_accuracy(group_by(assignment_results, functional_type),
.  "count", "assigned", 0.1))
}
